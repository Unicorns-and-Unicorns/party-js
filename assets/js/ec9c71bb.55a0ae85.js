(self.webpackChunkparty_js_docs=self.webpackChunkparty_js_docs||[]).push([[90],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=o,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4570:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return a},metadata:function(){return l},toc:function(){return c},default:function(){return p}});var r=n(2122),o=n(9756),i=(n(7294),n(3905)),a={title:"Components"},l={unversionedId:"ref/components",id:"ref/components",isDocsHomePage:!1,title:"Components",description:"To allow structured and clean functionalities, the library offers various component types to define properties like color, positions, rotations or behaviour over time. They are all exported into the party object.",source:"@site/docs/ref/components.md",sourceDirName:"ref",slug:"/ref/components",permalink:"/docs/ref/components",editUrl:"https://github.com/yiliansource/party-js/edit/main/docs/docs/ref/components.md",version:"current",frontMatter:{title:"Components"},sidebar:"docs",previous:{title:"Configuration",permalink:"/docs/ref/configuration"},next:{title:"Utilities",permalink:"/docs/ref/utilities"}},c=[{value:"Color",id:"color",children:[]},{value:"Vector",id:"vector",children:[]},{value:"Geometry Components",id:"geometry-components",children:[{value:"Rect",id:"rect",children:[]},{value:"Circle",id:"circle",children:[]}]},{value:"Splines",id:"splines",children:[{value:"Numeric Spline",id:"numeric-spline",children:[]},{value:"Gradient",id:"gradient",children:[]}]}],s={toc:c};function p(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"To allow structured and clean functionalities, the library offers various component types to define properties like color, positions, rotations or behaviour over time. They are all exported into the ",(0,i.kt)("inlineCode",{parentName:"p"},"party")," object."),(0,i.kt)("h2",{id:"color"},"Color"),(0,i.kt)("p",null,"Allows the representation of colors through RGB components."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const a = new party.Color(12, 59, 219);\nconst b = party.Color.fromHex("#ffa68d");\nconst result = a.mix(b); // Color (#8570b4)\n')),(0,i.kt)("p",null,"As seen above, colors can be mixed together (with an optional weight). Note that this will create a new object, instead of modifying one of the components."),(0,i.kt)("p",null,"Additionally, conversion from and to hexadecimal notation are supported, as well as conversion from HSL."),(0,i.kt)("h2",{id:"vector"},"Vector"),(0,i.kt)("p",null,"Allows the representation of things like location and rotation through XYZ components."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const vectorA = new party.Vector(1, 3, 5);\nconst vectorB = new party.Vector(2, 3, 1);\nconst vectorC = vectorA.add(vectorB); // (3, 6, 6)\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Vector")," class has various arithmetic vector math operations defined. Note that these always return a new vector, instead of altering an existing one."),(0,i.kt)("p",null,"You can also create a 2D vector from a 2D angle. Note that a 90\xb0 angle will return (0, 1) correctly, but will point downwards in the DOM."),(0,i.kt)("h2",{id:"geometry-components"},"Geometry Components"),(0,i.kt)("p",null,"Geometry components are usually used to define ",(0,i.kt)("a",{parentName:"p",href:"./sources"},"source sampler")," areas."),(0,i.kt)("h3",{id:"rect"},"Rect"),(0,i.kt)("p",null,"A simple rectangle with a position and size."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// (x, y, width, height)\nnew party.Rect(1, 2, 3, 4);\n\n// Uses the window's inner height to create a screen-space rect.\nparty.Rect.fromScreen();\n")),(0,i.kt)("h3",{id:"circle"},"Circle"),(0,i.kt)("p",null,"A simple circle with a position and radius."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// (x, y, radius)\nnew party.Circle(1, 2, 3);\n")),(0,i.kt)("h2",{id:"splines"},"Splines"),(0,i.kt)("p",null,"The library provides an abstract implementation of a spline, from which more specific implemenations stem. The basic concept is that a spline consists of spline keys, with a time and a value of an arbitrary type. Splines can be created through the constructor of the specific implementation, as seen further below."),(0,i.kt)("h3",{id:"numeric-spline"},"Numeric Spline"),(0,i.kt)("p",null,"A basic implementation of a numeric spline, with easing applied through cosine interpolation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const mySpline = new party.NumericSpline(\n    { time: 0, value: 0 },\n    { time: 1, value: 1 }\n);\nconst result = mySpline.evaluate(0.2); // 0.0955\n")),(0,i.kt)("h3",{id:"gradient"},"Gradient"),(0,i.kt)("p",null,"In this implementation, the values of the spline keys consist of colors, which are mixed together to ease between them. The implementation also offers static utility methods to easily create gradients."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const a = new party.Color(12, 59, 219);\nconst b = party.Color.fromHex("#ffa68d");\nconst simpleGradient = party.Gradient.simple(a, b);\nconst result = simpleGradient.evaluate(0.6); // Color (#9d7bac)\n')))}p.isMDXComponent=!0}}]);